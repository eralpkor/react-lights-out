{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","slide","board","createBoard","reset","handleChange","n","arguments","length","undefined","y","nrows","row","x","ncols","push","Math","random","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","e","target","value","preventDefault","_this2","tblBoard","_loop","concat","src_Cell_0","key","flipCellsAround","makeTable","type","min","max","onChange","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a278b430.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // console.log('clicked');\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    // chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      slide: 30,\n      board: this.createBoard()\n    };\n    this.reset = this.reset.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard(n=25) {\n    let board = [];\n    this.slide = n;\n   \n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.slide / 100);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  reset() {\n    this.setState({\n      hasWon: false,\n      slide: 30,\n      board: this.createBoard()\n    })\n  }\n\n  handleChange(e) {\n    this.setState({\n      hasWon: false,\n      slide: +e.target.value,\n      board: this.createBoard(+e.target.value)\n    })\n    e.preventDefault() //\n  }\n  /** Render game board or winning message. */\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n            <div className=\"Board-button-won\">\n              <button onClick={this.reset}>RESET</button>\n            </div>\n          </div>\n          \n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n            <div className=\"Board-button\">\n              <div className=\"child\">\n              <button onClick={this.reset}>RESET</button>\n              </div>\n              <div className=\"child\"><p>E</p></div>\n              <div className=\"Board-slider\">\n               \n                  <input className='Board-slider-input'\n                  type=\"range\" min=\"25\" max=\"90\"\n                  onChange={this.handleChange}\n                  value={this.state.slide}/>\n                \n              </div>\n              <div className=\"child\">\n                <p>H</p>\n              </div>\n            </div>\n          </div>\n        )}\n        \n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}